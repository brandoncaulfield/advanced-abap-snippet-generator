{
  "Class_Instance": {
    "prefix": "(ADV)instance class",
    "body": [
      "CLASS lcl_${TM_FILENAME/[\\.-]/_/g} DEFINITION CREATE PRIVATE FINAL.",
      "",
      "PUBLIC SECTION.",
      "",
      "\tCLASS-METHODS: create",
      "\t\tRETURNING",
      "\t\t\tVALUE(ro_obj) TYPE REF TO lcl_${TM_FILENAME/[\\.-]/_/g}.",
      "",        
      "\tMETHODS: run.",
      "",    
      "PROTECTED SECTION.",
      "PRIVATE SECTION.",
      "",
      "ENDCLASS.",
      "",
      "CLASS lcl_${TM_FILENAME/[\\.-]/_/g} IMPLEMENTATION.",
      "",
      "\tMETHOD create.",
      "\t\tro_obj = NEW lcl_${TM_FILENAME/[\\.-]/_/g}( ).",
      "",
      "\tENDMETHOD.",
      "",
      "\tMETHOD run.",
      "",
      "\t\tcl_demo_output=>display( |Hello World!| ).",
      "",
      "\tENDMETHOD.",
      "",
      "ENDCLASS."
    ],
    "description": "Instance class scafolding"
  },  
  "Class_Basic": {
    "prefix": "(ADV)class",
    "body": [
        "CLASS lcl_${TM_FILENAME/[\\.-]/_/g} DEFINITION CREATE PRIVATE FINAL.",
        "",
        "PUBLIC SECTION.",
        "PROTECTED SECTION.",
        "PRIVATE SECTION.",
        "ENDCLASS.",
        "",
        "CLASS lcl_${TM_FILENAME/[\\.-]/_/g} IMPLEMENTATION.",
        "",
        "ENDCLASS.",
    ],
    "description": "Basic Class Scafolding"
  },
  "Class_ALV": {
    "prefix": "(ADV)ALV class",
    "body": [
      "CLASS lcl_${TM_FILENAME/[\\.-]/_/g} DEFINITION CREATE PRIVATE FINAL.",
      "",
      "PUBLIC SECTION.",
      "",
      "\tCLASS-METHODS: create",
      "\t\tRETURNING",
      "\t\t\tVALUE(ro_obj) TYPE REF TO lcl_${TM_FILENAME/[\\.-]/_/g}.",
      "",        
      "\tMETHODS: get_data.",
      "",        
      "\tMETHODS: display_data.",
      "",    
      "PROTECTED SECTION.",
      "PRIVATE SECTION.",
      "",
      "ENDCLASS.",
      "",
      "CLASS lcl_${TM_FILENAME/[\\.-]/_/g} IMPLEMENTATION.",
      "",
      "\tMETHOD create.",
      "",
      "\t\tro_obj_name = NEW lcl_${TM_FILENAME/[\\.-]/_/g}( ).",
      "",
      "\tENDMETHOD.",
      "",
      "\tMETHOD get_data.",
      "",
      "\t\t\"Get your data here then add it to \"display table...\" in the display_data meth"
      "",
      "\tENDMETHOD.",
      "",
      "\tMETHOD display_data.",
      "",
      "\t\tTRY.",
      "\t\tcl_salv_table=>factory(",
      "\t\t\tIMPORTING",
      "\t\t\t\tr_salv_table   = lo_alv            \" Basis Class Simple ALV Tables",
      "\t\t\tCHANGING",
      "\t\t\t\tt_table        = ${1:\"display table...}",
      "\t\t).",
      "\t\tCATCH cx_salv_msg INTO DATA(lx_msg). \" ALV: General Error Class with Message",
      "\t\t\t\tcl_demo_output=>display( lx_msg ).",
      "\t\tENDTRY.",
      "",
      "\t\tlo_alv->display( ).",
      "",
      "\tENDMETHOD.",
      "",
      "ENDCLASS."
    ],
    "description": "ALV class scafolding"
  }